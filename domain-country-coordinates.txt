
import pandas as pd
from fastparquet import ParquetFile
import socket
import geocoder


pf = ParquetFile('datasets/parquet/domain_aggregation.pq')
df = pf.to_pandas()

countries_df = pd.read_csv('datasets/countries.tsv', sep='\t')

countries_df

domain_latlong = {}

for row in df[:250].iterrows():
    domain = row[1][0]
    try:
        ip_address = socket.gethostbyname(domain)
        g = geocoder.ip(ip_address)
        if g:
            domain_latlong[domain] = {'lat': g.latlng[0], 'long': g.latlng[1]}
    except socket.gaierror as ge:
        print(f"Unable to resolve {domain}")
        tld = domain.split('.')[-1]
        if tld != 'bitnet':
            country = countries_df.loc[countries_df['country'] == tld.upper()]
            if country.empty:
                print(f"   Unable to find {tld}")
            else:
                domain_latlong[domain] = {'lat': country.iloc[0]['latitude'], 'long': country.iloc[0]['longitude']}
                print(f"   Resolved {tld}")
                

domain_latlong_df = pd.DataFrame.from_dict(domain_latlong, orient='index')

import datashader as ds
import pandas as pd
from colorcet import fire
from datashader import transfer_functions as tf

agg = ds.Canvas().points(domain_latlong_df, 'lat', 'long')
tf.set_background(tf.shade(agg, cmap=fire),"black")

import holoviews as hv
import geoviews as gv
from holoviews.operation.datashader import datashade
hv.extension('bokeh')

url = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{Z}/{Y}/{X}.jpg'
tile_opts  = dict(width=1000,height=600,xaxis=None,yaxis=None,bgcolor='black',show_grid=False)
map_tiles  = gv.WMTS(url).opts(style=dict(alpha=0.5), plot=tile_opts)
points     = hv.Points(domain_latlong_df, ['lat', 'long'])
taxi_trips = datashade(points, x_sampling=1, y_sampling=1, cmap=fire, width=1000, height=600)

map_tiles * taxi_trips

from ipyleaflet import Map, basemaps, basemap_to_tiles, Marker, Icon, Polyline

center = (52.204793, 0.121558)

m = Map(
    layers=(basemap_to_tiles(basemaps.OpenStreetMap.Mapnik), ),
    center=(52.204793, 0.121558),
    zoom=4
)


icon = Icon(icon_url='marker-40.png', icon_size=[40, 40], icon_anchor=[22,94])
mark = Marker(location=center, icon=icon)

m.add_layer(mark)

for row in domain_latlong_df.iterrows():
    point = (row[1]['lat'], row[1]['long'])
    
    marker = Marker(location=point, icon=icon, draggable=False)
    m.add_layer(marker);

line = Polyline(
    locations = 
    [[45.51, -122.68],
    [37.77, -122.43]],
    color = "green" ,
    fill_color= "green",
    weight=1,
    stroke=True)
m.add_layer(line)

m


